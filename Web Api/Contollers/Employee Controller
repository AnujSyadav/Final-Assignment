using Final_Claim_Ass.Db;
using Final_Claim_Ass.Model;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Vito_Claim_Managemnt_System.Models;

namespace Final_Claim_Ass.Controllers
{

    public class EmaployeeController : ControllerBase
    {

        Claim_ManagementContext dbconn = new Claim_ManagementContext();

        [HttpPost]
        [Route("api/Emp/Login")]

        public string Login(string Empid , string pass)

        {

            var res = dbconn.Employees.Where(m => m.Employee_Id == Empid).FirstOrDefault();
            if (res == null)
            {
                return "Employee not Found";
            }

            else
            {
                if (res.Employee_Id == Empid && res.Employee_Password == pass)
                {
                    return "Success";
                }
                else
                {
                    return "no pass";
                }
            }
        }
      
               [HttpGet]
                [Route("api/Employee_Info_Particular")]
                public EmployeeModel Employee_Info_Particular(EmployeeModel obj1)
                {
                    var res = dbconn.Employees.Where(m => m.Employee_Id == obj1.EmployeeId).First();
                    EmployeeModel obj = new EmployeeModel();
                    obj.EIdentity = res.E_Identity;
                    obj.EmployeeId = res.Employee_Id;
                    obj.RoleId = res.Role_Id;
                    obj.EmployeeFname = res.Employee_Fname;
                    obj.EmployeeLname = res.Employee_Lname;
                    obj.EmployeeSal = res.Employee_Sal;
                    obj.EmployeeQualification = res.Employee_Qualification;
                    obj.EmployeeAddress = res.Employee_Address;
                    obj.EmployeeState = res.Employee_State;
                    obj.EmployeeCountry = res.Employee_Country;
                    obj.EmployeeZipcode = res.Employee_Zipcode;
                    obj.EmployeeContact = res.Employee_Contact;
                    obj.EmployeeDob = res.Employee_Dob;
                    obj.EmployeeGender = res.Employee_Gender;
                    obj.EmployeeBank = res.Employee_Bank;
                    obj.EmployeeAccountNo = res.Employee_AccountNo;
                    obj.EmployeeDepartment = res.Employee_Department;
                    obj.EmployeeEmail = res.Employee_Email;
                    obj.EmployeePassword = res.Employee_Password;
                    obj.EmployeeImage = res.Employee_Image;

                    return obj;
                }



                [HttpGet]
                [Route("api/Update_Employee")]

                public EmployeeModel Update_Employee(string Employee_Id)
                {
                    var res = dbconn.Employees.Where(m => m.Employee_Id == Employee_Id).First();

                    EmployeeModel obj = new EmployeeModel();

                    obj.RoleId = res.Role_Id;
                    obj.EmployeeFname = res.Employee_Fname;
                    obj.EmployeeLname = res.Employee_Lname;
                    obj.EmployeeSal = res.Employee_Sal;
                    obj.EmployeeQualification = res.Employee_Qualification;
                    obj.EmployeeAddress = res.Employee_Address;
                    obj.EmployeeState = res.Employee_State;
                    obj.EmployeeCountry = res.Employee_Country;
                    obj.EmployeeZipcode = res.Employee_Zipcode;
                    obj.EmployeeContact = res.Employee_Contact;
                    obj.EmployeeDob = res.Employee_Dob;
                    obj.EmployeeGender = res.Employee_Gender;
                    obj.EmployeeBank = res.Employee_Bank;
                    obj.EmployeeAccountNo = res.Employee_AccountNo;
                    obj.EmployeeDepartment = res.Employee_Department;
                    obj.EmployeeEmail = res.Employee_Email;
                    obj.EmployeePassword = res.Employee_Password;
                    obj.EmployeeImage = res.Employee_Image;


                    return obj;

                }

            [HttpGet]
            [Route("api/Delete_Employee")]

            public HttpResponseMessage DeleteEmployee(string Employee_Id)
            {
                // var res = dbconn.Database.ExecuteSqlInterpolated($" Delete_Employee {Employee_Id}");

                HttpResponseMessage response = new HttpResponseMessage(System.Net.HttpStatusCode.OK);
                return response;
            }

            [HttpPost]
            [Route("api/Add_New_Employee ")]

            public HttpResponseMessage Add_New_Employee(EmployeeModel obj)
            {

                if (obj.EmployeeId == null)
                 {
                     dbconn.Database.ExecuteSqlInterpolated($"Add_New_Employee {obj.RoleId},{obj.EmployeeFname},{obj.EmployeeLname},{obj.EmployeeSal},{obj.EmployeeQualification},{obj.EmployeeAddress},{obj.EmployeeState},{obj.EmployeeCountry},{obj.EmployeeZipcode},{obj.EmployeeContact},{obj.EmployeeDob},{obj.EmployeeGender},{obj.EmployeeBank},{obj.EmployeeAccountNo},{obj.EmployeeDepartment},{obj.EmployeeEmail},{obj.EmployeePassword},{obj.EmployeeImage}");
                 }

                 else
                 {

                     dbconn.Entry(obj).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                     dbconn.SaveChanges();
                 }

                HttpResponseMessage response = new HttpResponseMessage(System.Net.HttpStatusCode.OK);
                return response;
            }

            [HttpGet]
            [Route("api/Employee_Claims_Particular_Info")]

            public List<Employee_Claims_Model> Employee_Cliams_Particular_Info(string EmployeeId)
            {
                var res = dbconn.Show_Employee_Particular_Claim_Procs.FromSqlInterpolated($"Show_Employee_Particular_Cliam {EmployeeId}").ToList();

                List<Employee_Claims_Model> obj = new List<Employee_Claims_Model>();

                 foreach (var item in res)
                 {
                     obj.Add(new Employee_Claims_Model()
                     {

                         ClaimsNoId = item.Claims_No_Id,
                         ManagerId = item.Manager_Id,
                         EmployeeId = item.Employee_Id,
                         SourceLocation = item.Source_Location,
                         DestinationLocation = item.Destination_Location,
                         Purpose = item.Purpose,
                         DistanceKms = item.Distance_Kms,
                         Rupees = item.Rupees,
                         ToDate = item.To_Date,
                         FromDate = item.From_Date,
                         TravelBy = item.Travel_By,
                         StatusOfClaims = item.Status_Of_Claims,
                         EmployeeClaimsProof = item.Employee_Claims_Proof


                     });
                 }
                return obj;
            }
            [HttpPost]
            [Route("api/Insert_Employee_Claims")]
            public HttpResponseMessage Insert_Employee_Claims(Employee_Claims_Model obj)
            {

                if (obj.ClaimsNoId == 0)
                {
                    var res = dbconn.Database.ExecuteSqlInterpolated($"Insert_Employee_Claims{obj.ManagerId},{obj.EmployeeId},{obj.SourceLocation},{obj.DestinationLocation},{obj.Purpose},{obj.DistanceKms},{obj.Rupees},{obj.TravelBy},{obj.FromDate},{obj.ToDate},{obj.StatusOfClaims},{obj.EmployeeClaimsProof}");
                }
                else
                {
                    dbconn.Entry(obj).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                    dbconn.SaveChanges();
                }
                HttpResponseMessage resp = new HttpResponseMessage(System.Net.HttpStatusCode.OK);
                return resp;

            }

            [HttpGet]
            [Route("api/Update_Employee_Claims")]

            public Employee_Claims_Model Update_Employee_Claims(int ClaimsNoId)
            {
                 var res = dbconn.EmployeeClaimsTables.Where(m => m.ClaimsNoId == ClaimsNoId).First();

                Employee_Claims_Model obj = new Employee_Claims_Model();

                 obj.ClaimsNoId = res.ClaimsNoId;
                 obj.ManagerId = res.ManagerId;
                 obj.EmployeeId = res.EmployeeId;
                 obj.SourceLocation = res.SourceLocation;
                 obj.DestinationLocation = res.DestinationLocation;
                 obj.Purpose = res.Purpose;
                 obj.DistanceKms = res.DistanceKms;
                 obj.Rupees = res.Rupees;
                 obj.ToDate = res.ToDate;
                 obj.FromDate = res.FromDate;
                 obj.TravelBy = res.TravelBy;
                 obj.StatusOfClaims = res.StatusOfClaims;
                 obj.EmployeeClaimsProof = res.EmployeeClaimsProof;

                return obj;
            }

            [HttpGet]
            [Route("api/Delete_Employee_Claims")]

            public HttpResponseMessage Delete_Employee_Claims(int Claim_No_Id)
            {

                var res = dbconn.EmployeeClaimsTables.Where(m => m.ClaimsNoId == Claim_No_Id).First();
                 dbconn.EmployeeClaimsTables.Remove(res);
                 dbconn.SaveChanges();

                HttpResponseMessage resp = new HttpResponseMessage(System.Net.HttpStatusCode.OK);
                return resp;
            }

            [HttpGet]
            [Route("api/Employee_Claim_Status_History")]

            public List<Employee_Claim_Status_History_Particular_Model> Employee_Claim_Status_History(string EmployeeId)
            {

                 var res = dbconn.EmployeeClaimStatusHistories.Where(m => m.EmployeeId == EmployeeId).ToList();
                List<Employee_Claim_Status_History_Particular_Model> obj = new List<Employee_Claim_Status_History_Particular_Model>();
                 foreach (var item in res)
                 {
                     obj.Add(new Employee_Claim_Status_History_Particular_Model()
                     {
                         HistoryId = item.HistoryId,
                         ClaimsNoId = item.ClaimsNoId,
                         ManagerId = item.ManagerId,
                         EmployeeId = item.EmployeeId,
                         Accountant = item.Accountant,
                         Manager = item.Manager,
                         Approved = item.Approved,
                         Rejected = item.Rejected,
                         SendBack = item.SendBack,
                         Reason = item.Reason

                     });
                 }
                return obj;
            }
    }
    
}
